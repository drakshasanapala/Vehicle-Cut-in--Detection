import cv2
from google.colab.patches import cv2_imshow

haar_cascade = 'cars.xml'
video = '/content/Building Self Driving Car - Local Dataset - Day.mp4'

cap = cv2.VideoCapture(video)
car_cascade = cv2.CascadeClassifier(haar_cascade)

# Get the width and height of the frames
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))

# Define the codec and create VideoWriter object
out = cv2.VideoWriter('output.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 30, (frame_width, frame_height))

# reads frames from a video
ret, frames = cap.read()

# convert frames to gray scale
gray = cv2.cvtColor(frames, cv2.COLOR_BGR2GRAY)

# Detects cars of different sizes in the input image
cars = car_cascade.detectMultiScale(gray, 1.1, 1)
# To draw a rectangle in each car
for (x, y, w, h) in cars:
    cv2.rectangle(frames, (x, y), (x + w, y + h), (0, 0, 255), 2)

# Write the frame into the file
out.write(frames)

# Display frames in a window
cv2_imshow(frames)  # Use cv2_imshow instead of cv2.imshow

# loop runs if capturing has been initialized.
while cap.isOpened():
    # reads frames from a video
    ret, frames = cap.read()
    
    if not ret:
        break

    # convert to gray scale of each frame
    gray = cv2.cvtColor(frames, cv2.COLOR_BGR2GRAY)

    # Detects cars of different sizes in the input image
    cars = car_cascade.detectMultiScale(gray, 1.1, 1)

    # To draw a rectangle in each car
    for (x, y, w, h) in cars:
        cv2.rectangle(frames, (x, y), (x + w, y + h), (0, 0, 255), 2)

    # Write the frame into the file
    out.write(frames)

    # Display frames in a window
    #cv2_imshow(frames)  # Use cv2_imshow instead of cv2.imshow

    # Wait for Esc key to stop
    if cv2.waitKey(33) == 27:
        break

# Release everything if job is finished
cap.release()
out.release()
cv2.destroyAllWindows()
